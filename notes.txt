# Configuration
Terraform uses text files to describe infrastructure and to set variables. These text files are called Terraform "configurations" and end in .tf.
Terraform format ends in .tf and JSON format ends in .tf.json.

# Load Order and Semantics
Terraform loads all configuration files within the directory specified in alphabetical order.
Override files are the exception, as they're loaded after all non-override files, in alphabetical order.
The files loaded must end in either .tf or .tf.json to specify the format that is in use. Otherwise, the files are ignored.
The order of variables, resources, etc. defined within the configuration doesn't matter.
Terraform configurations are declarative, so references to other resources and variables do not depend on the order they're defined.

# Overrides
Overrides names must be override or end in _override, excluding the extension. Ex- override.tf, override.tf.json, temp_override.tf.

# Interpolation Syntax
Interpolations are wrapped in ${}, such as ${var.foo}.
You can escape interpolation with double dollar signs, $${foo} will be rendered as a literal ${foo}.
User string variables- ${var.foo} will interpolate the foo variable value
User map variables- ${var.MAP["KEY"]}
    - For ex. ${var.amis["us-east-1"]} would get the value of the us-east-1 key within the amis map variable.
User list variables- ${var.LIST}
    - For ex. "${var.subnets}" would get the value of the subnets list, as a list.
    - You can also return list elements by index, ${var.subnets[idx]}.
Attributes of your own resource- ${self.ATTRIBUTE}
    - For example ${self.private_ip} will interpolate that resource's private IP address.
    - The self.ATTRIBUTE syntax is only allowed and valid within provisioners.
Attributes of other resources- ${TYPE.NAME.ATTRIBUTE}
    - For example, ${aws_instance.web.id}
    - If count attribute is set, to 1st attributes ${aws_instance.web.0.id}
    - To get a list of all the attributes ${aws_instance.web.*.id}.
Attributes of a data source- ${data.TYPE.NAME.ATTRIBUTE}
    - For ex. ${data.aws_ami.ubuntu.id}
Outputs from a module- ${MODULE.NAME.OUTPUT}
    - For example ${module.foo.bar}
Count information- ${count.FIELD}
    - For example, ${count.index} will interpolate the current index in a multi-count resource.
Path information- $path.TYPE}. TYPE can be cwd, module, or root.
    - 'cwd'- current working directory. 'module'- path to the current module. 'root'- path of the root module.
    - In general, you probably want the path.module variable.
Terraform meta information- ${terraform.FIELD}
    - This variable type contains metadata about the currently executing Terraform run.
    - FIELD can currently only be env to reference the currently active state environment.

# Resource Configuration
The resource block creates and manage a new infrastructure component (resource) of the given TYPE (first parameter) and NAME (second parameter). The combination of the type and name must be unique.
Meta-parameters- There are meta-parameters available to all resources
    - count, depends_on, provider, lifecycle (create_before_destroy, prevent_destroy, ignore_changes)

# Data Source Configuration
Data sources allow data to be fetched or computed for use elsewhere in Terraform configuration
    
# Input Variable Configuration
variable "key" {
  type = "string"
  description = "it is the description for 'key' varible"
}
variable "images" {
  type = "map"
  default = {
    us-east-1 = "image-1234"
    us-west-2 = "image-4567"
  }
}
variable "zones" {
  default = ["us-east-1a", "us-east-1b"]
}

# Output Configuration
output "address" {
  value = "${aws_instance.db.public_dns}"
}
output "addresses" {
  value = ["${aws_instance.web.*.public_dns}"]
}

# Local Value Configuration
#### TODO ####

# Terraform Configuration
The terraform configuration section is used to configure Terraform itself, such as requiring a minimum Terraform version to execute a configuration.
The currently only allowed configurations within this block are required_version and backend
No value within the terraform block can use interpolations. The terraform block is loaded very early in the execution of Terraform and interpolations are not yet available.

# File Provisioner
The file provisioner is used to copy files or directories from the machine executing Terraform to the newly created resource.
following arguments are supported- source, content, destination

# Provisioner Connections
provisioner "file" {
  source      = "conf/myapp.conf"
  destination = "/etc/myapp.conf"
  connection {
    type     = "ssh"
    user     = "root"
    password = "${var.root_password}"
  }
}

# local-exec Provisioner
The local-exec provisioner invokes a local executable after a resource is created.
resource "aws_instance" "web" {
  provisioner "local-exec" {
    command = "echo ${aws_instance.web.private_ip} >> private_ips.txt"
  }
}

# remote-exec Provisioner
The remote-exec provisioner invokes a script on a remote resource after it is created. This can be used to run a configuration management tool, bootstrap into a cluster, etc.
The following arguments are supported- inline, script, scripts 
resource "aws_instance" "web" {
  provisioner "file" {
    source      = "script.sh"
    destination = "/tmp/script.sh"
  }
  provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/script.sh",
      "/tmp/script.sh args",
    ]
  }
}
    
terraform init
terraform plan
terraform apply
terraform show
terraform destroy
terraform output
terraform import
terraform get
terraform graph

https://blog.gruntwork.io/why-we-use-terraform-and-not-chef-puppet-ansible-saltstack-or-cloudformation-7989dad2865c


Implicit and Explicit Dependencies

If a resource successfully creates but fails during provisioning, Terraform will error and mark the resource as "tainted". A resource that is tainted has been physically created, but can't be considered safe to use since provisioning failed.
When you generate your next execution plan, Terraform will not attempt to restart provisioning on the same resource because it isn't guaranteed to be safe. Instead, Terraform will remove any tainted resources and create new resources, attempting to provision them again after creation.
Terraform also does not automatically roll back and destroy the resource during the apply when the failure happens, because that would go against the execution plan: the execution plan would've said a resource will be created, but does not say it will ever be deleted. If you create an execution plan with a tainted resource, however, the plan will clearly state that the resource will be destroyed because it is tainted.

For all files which match terraform.tfvars or *.auto.tfvars present in the current directory, Terraform automatically loads them to populate variables. If the file is named something else, you can use the -var-file flag directly to specify a file. These files are the same syntax as Terraform configuration files. And like Terraform configuration files, these files can also be JSON.

We don't recommend saving usernames and password to version control, but you can create a local secret variables file and use -var-file to load it.

You can use multiple -var-file arguments in a single command, with some checked in to version control and others not checked in. For example:

$ terraform apply \
  -var-file="secret.tfvars" \
  -var-file="production.tfvars"
  
  The only thing that’s different about a module is that whenever you add one to a Terraform project, you need to run the “get” command before you run “plan” or “apply”:
  Whenever adding a new module, don’t forget to run “terraform get”: